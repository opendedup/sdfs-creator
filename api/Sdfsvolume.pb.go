// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: Sdfsvolume.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	sdfs_creator "github.com/opendedup/sdfs_creator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type HashTypes int32

const (
	HashTypes_VARIABLE_SHA256     HashTypes = 0
	HashTypes_VARIABLE_SHA256_160 HashTypes = 1
	HashTypes_VARIABLE_MD5        HashTypes = 2
)

// Enum value maps for HashTypes.
var (
	HashTypes_name = map[int32]string{
		0: "VARIABLE_SHA256",
		1: "VARIABLE_SHA256_160",
		2: "VARIABLE_MD5",
	}
	HashTypes_value = map[string]int32{
		"VARIABLE_SHA256":     0,
		"VARIABLE_SHA256_160": 1,
		"VARIABLE_MD5":        2,
	}
)

func (x HashTypes) Enum() *HashTypes {
	p := new(HashTypes)
	*p = x
	return p
}

func (x HashTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_Sdfsvolume_proto_enumTypes[0].Descriptor()
}

func (HashTypes) Type() protoreflect.EnumType {
	return &file_Sdfsvolume_proto_enumTypes[0]
}

func (x HashTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashTypes.Descriptor instead.
func (HashTypes) EnumDescriptor() ([]byte, []int) {
	return file_Sdfsvolume_proto_rawDescGZIP(), []int{0}
}

type VolumeTypes int32

const (
	VolumeTypes_VOL_TYPE_AWS   VolumeTypes = 0
	VolumeTypes_VOL_TYPE_AZURE VolumeTypes = 1
	VolumeTypes_VOL_TYPE_GS3   VolumeTypes = 2
	VolumeTypes_VOL_TYPE_LOCAL VolumeTypes = 3
	VolumeTypes_VOL_TYPE_GS    VolumeTypes = 4
	VolumeTypes_VOL_TYPE_B2    VolumeTypes = 5
	VolumeTypes_VOL_TYPT_MINIO VolumeTypes = 6
)

// Enum value maps for VolumeTypes.
var (
	VolumeTypes_name = map[int32]string{
		0: "VOL_TYPE_AWS",
		1: "VOL_TYPE_AZURE",
		2: "VOL_TYPE_GS3",
		3: "VOL_TYPE_LOCAL",
		4: "VOL_TYPE_GS",
		5: "VOL_TYPE_B2",
		6: "VOL_TYPT_MINIO",
	}
	VolumeTypes_value = map[string]int32{
		"VOL_TYPE_AWS":   0,
		"VOL_TYPE_AZURE": 1,
		"VOL_TYPE_GS3":   2,
		"VOL_TYPE_LOCAL": 3,
		"VOL_TYPE_GS":    4,
		"VOL_TYPE_B2":    5,
		"VOL_TYPT_MINIO": 6,
	}
)

func (x VolumeTypes) Enum() *VolumeTypes {
	p := new(VolumeTypes)
	*p = x
	return p
}

func (x VolumeTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_Sdfsvolume_proto_enumTypes[1].Descriptor()
}

func (VolumeTypes) Type() protoreflect.EnumType {
	return &file_Sdfsvolume_proto_enumTypes[1]
}

func (x VolumeTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeTypes.Descriptor instead.
func (VolumeTypes) EnumDescriptor() ([]byte, []int) {
	return file_Sdfsvolume_proto_rawDescGZIP(), []int{1}
}

type MountStatus int32

const (
	MountStatus_mounted   MountStatus = 0
	MountStatus_mounting  MountStatus = 1
	MountStatus_unmounted MountStatus = 2
)

// Enum value maps for MountStatus.
var (
	MountStatus_name = map[int32]string{
		0: "mounted",
		1: "mounting",
		2: "unmounted",
	}
	MountStatus_value = map[string]int32{
		"mounted":   0,
		"mounting":  1,
		"unmounted": 2,
	}
)

func (x MountStatus) Enum() *MountStatus {
	p := new(MountStatus)
	*p = x
	return p
}

func (x MountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Sdfsvolume_proto_enumTypes[2].Descriptor()
}

func (MountStatus) Type() protoreflect.EnumType {
	return &file_Sdfsvolume_proto_enumTypes[2]
}

func (x MountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MountStatus.Descriptor instead.
func (MountStatus) EnumDescriptor() ([]byte, []int) {
	return file_Sdfsvolume_proto_rawDescGZIP(), []int{2}
}

type Levels int32

const (
	Levels_INFO    Levels = 0
	Levels_WARN    Levels = 1
	Levels_ERROR   Levels = 2
	Levels_RUNNING Levels = 3
)

// Enum value maps for Levels.
var (
	Levels_name = map[int32]string{
		0: "INFO",
		1: "WARN",
		2: "ERROR",
		3: "RUNNING",
	}
	Levels_value = map[string]int32{
		"INFO":    0,
		"WARN":    1,
		"ERROR":   2,
		"RUNNING": 3,
	}
)

func (x Levels) Enum() *Levels {
	p := new(Levels)
	*p = x
	return p
}

func (x Levels) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Levels) Descriptor() protoreflect.EnumDescriptor {
	return file_Sdfsvolume_proto_enumTypes[3].Descriptor()
}

func (Levels) Type() protoreflect.EnumType {
	return &file_Sdfsvolume_proto_enumTypes[3]
}

func (x Levels) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Levels.Descriptor instead.
func (Levels) EnumDescriptor() ([]byte, []int) {
	return file_Sdfsvolume_proto_rawDescGZIP(), []int{3}
}

type VolumeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SdfscliPassword             string    `protobuf:"bytes,1,opt,name=sdfscli_password,json=sdfscliPassword,proto3" json:"sdfscli_password,omitempty"`
	AwsBucketLocation           string    `protobuf:"bytes,2,opt,name=aws_bucket_location,json=awsBucketLocation,proto3" json:"aws_bucket_location,omitempty"`
	SdfscliRequireAuth          string    `protobuf:"bytes,3,opt,name=sdfscli_require_auth,json=sdfscliRequireAuth,proto3" json:"sdfscli_require_auth,omitempty"`
	SdfscliRequireMutualTls     string    `protobuf:"bytes,4,opt,name=sdfscli_require_mutual_tls,json=sdfscliRequireMutualTls,proto3" json:"sdfscli_require_mutual_tls,omitempty"`
	SdfscliDisableSsl           string    `protobuf:"bytes,5,opt,name=sdfscli_disable_ssl,json=sdfscliDisableSsl,proto3" json:"sdfscli_disable_ssl,omitempty"`
	SdfscliListenPort           string    `protobuf:"bytes,6,opt,name=sdfscli_listen_port,json=sdfscliListenPort,proto3" json:"sdfscli_listen_port,omitempty"`
	GlacierInDays               int32     `protobuf:"varint,7,opt,name=glacier_in_days,json=glacierInDays,proto3" json:"glacier_in_days,omitempty"`
	AzurearchiveInDays          int32     `protobuf:"varint,8,opt,name=azurearchive_in_days,json=azurearchiveInDays,proto3" json:"azurearchive_in_days,omitempty"`
	RefreshBlobs                bool      `protobuf:"varint,9,opt,name=refresh_blobs,json=refreshBlobs,proto3" json:"refresh_blobs,omitempty"`
	SdfscliListenAddr           int32     `protobuf:"varint,10,opt,name=sdfscli_listen_addr,json=sdfscliListenAddr,proto3" json:"sdfscli_listen_addr,omitempty"`
	HashtableRmThreshold        int64     `protobuf:"varint,11,opt,name=hashtable_rm_threshold,json=hashtableRmThreshold,proto3" json:"hashtable_rm_threshold,omitempty"`
	SdfsBasePath                string    `protobuf:"bytes,12,opt,name=sdfs_base_path,json=sdfsBasePath,proto3" json:"sdfs_base_path,omitempty"`
	BasePath                    string    `protobuf:"bytes,13,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	CloudUrl                    string    `protobuf:"bytes,14,opt,name=cloud_url,json=cloudUrl,proto3" json:"cloud_url,omitempty"`
	AwsBasicSigner              bool      `protobuf:"varint,15,opt,name=aws_basic_signer,json=awsBasicSigner,proto3" json:"aws_basic_signer,omitempty"`
	AwsDisableDnsBucket         bool      `protobuf:"varint,16,opt,name=aws_disable_dns_bucket,json=awsDisableDnsBucket,proto3" json:"aws_disable_dns_bucket,omitempty"`
	CompressMetadata            bool      `protobuf:"varint,17,opt,name=compress_metadata,json=compressMetadata,proto3" json:"compress_metadata,omitempty"`
	NoSimpleMetadata            bool      `protobuf:"varint,18,opt,name=no_simple_metadata,json=noSimpleMetadata,proto3" json:"no_simple_metadata,omitempty"`
	DedupDbStore                string    `protobuf:"bytes,19,opt,name=dedup_db_store,json=dedupDbStore,proto3" json:"dedup_db_store,omitempty"`
	DedupDbtrashStore           string    `protobuf:"bytes,20,opt,name=dedup_dbtrash_store,json=dedupDbtrashStore,proto3" json:"dedup_dbtrash_store,omitempty"`
	IoLog                       string    `protobuf:"bytes,21,opt,name=io_log,json=ioLog,proto3" json:"io_log,omitempty"`
	CloudDisableTest            string    `protobuf:"bytes,22,opt,name=cloud_disable_test,json=cloudDisableTest,proto3" json:"cloud_disable_test,omitempty"`
	IoSafeClose                 bool      `protobuf:"varint,23,opt,name=io_safe_close,json=ioSafeClose,proto3" json:"io_safe_close,omitempty"`
	IoSafeSync                  bool      `protobuf:"varint,24,opt,name=io_safe_sync,json=ioSafeSync,proto3" json:"io_safe_sync,omitempty"`
	IoWriteThreads              int32     `protobuf:"varint,25,opt,name=io_write_threads,json=ioWriteThreads,proto3" json:"io_write_threads,omitempty"`
	IoChunkSize                 int32     `protobuf:"varint,26,opt,name=io_chunk_size,json=ioChunkSize,proto3" json:"io_chunk_size,omitempty"`
	IoMaxFileWriteBuffers       int32     `protobuf:"varint,27,opt,name=io_max_file_write_buffers,json=ioMaxFileWriteBuffers,proto3" json:"io_max_file_write_buffers,omitempty"`
	IoMaxOpenFiles              int32     `protobuf:"varint,28,opt,name=io_max_open_files,json=ioMaxOpenFiles,proto3" json:"io_max_open_files,omitempty"`
	LocalCacheSize              string    `protobuf:"bytes,29,opt,name=local_cache_size,json=localCacheSize,proto3" json:"local_cache_size,omitempty"`
	IoMetaFileCache             int32     `protobuf:"varint,30,opt,name=io_meta_file_cache,json=ioMetaFileCache,proto3" json:"io_meta_file_cache,omitempty"`
	IoClaimChunksSchedule       string    `protobuf:"bytes,31,opt,name=io_claim_chunks_schedule,json=ioClaimChunksSchedule,proto3" json:"io_claim_chunks_schedule,omitempty"`
	PermissionsFile             string    `protobuf:"bytes,32,opt,name=permissions_file,json=permissionsFile,proto3" json:"permissions_file,omitempty"`
	PermissionsFolder           string    `protobuf:"bytes,33,opt,name=permissions_folder,json=permissionsFolder,proto3" json:"permissions_folder,omitempty"`
	PermissionsOwner            string    `protobuf:"bytes,34,opt,name=permissions_owner,json=permissionsOwner,proto3" json:"permissions_owner,omitempty"`
	PermissionsGroup            string    `protobuf:"bytes,35,opt,name=permissions_group,json=permissionsGroup,proto3" json:"permissions_group,omitempty"`
	VolumeCapacity              string    `protobuf:"bytes,36,opt,name=volume_capacity,json=volumeCapacity,proto3" json:"volume_capacity,omitempty"`
	VolumeName                  string    `protobuf:"bytes,37,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	VolumeMaximumFullPercentage int32     `protobuf:"varint,38,opt,name=volume_maximum_full_percentage,json=volumeMaximumFullPercentage,proto3" json:"volume_maximum_full_percentage,omitempty"`
	ChunkStoreDataLocation      string    `protobuf:"bytes,39,opt,name=chunk_store_data_location,json=chunkStoreDataLocation,proto3" json:"chunk_store_data_location,omitempty"`
	ChunkStoreHashdbLocation    string    `protobuf:"bytes,40,opt,name=chunk_store_hashdb_location,json=chunkStoreHashdbLocation,proto3" json:"chunk_store_hashdb_location,omitempty"`
	ChunkstoreClass             string    `protobuf:"bytes,41,opt,name=chunkstore_class,json=chunkstoreClass,proto3" json:"chunkstore_class,omitempty"`
	ChunkStoreGcSchedule        string    `protobuf:"bytes,42,opt,name=chunk_store_gc_schedule,json=chunkStoreGcSchedule,proto3" json:"chunk_store_gc_schedule,omitempty"`
	ChunkStoreHashdbClass       string    `protobuf:"bytes,43,opt,name=chunk_store_hashdb_class,json=chunkStoreHashdbClass,proto3" json:"chunk_store_hashdb_class,omitempty"`
	ChunkStoreSize              string    `protobuf:"bytes,44,opt,name=chunk_store_size,json=chunkStoreSize,proto3" json:"chunk_store_size,omitempty"`
	HashType                    HashTypes `protobuf:"varint,45,opt,name=hash_type,json=hashType,proto3,enum=HashTypes" json:"hash_type,omitempty"`
	ChunkStoreEncrypt           bool      `protobuf:"varint,46,opt,name=chunk_store_encrypt,json=chunkStoreEncrypt,proto3" json:"chunk_store_encrypt,omitempty"`
	ChunkStoreEncryptionKey     string    `protobuf:"bytes,47,opt,name=chunk_store_encryption_key,json=chunkStoreEncryptionKey,proto3" json:"chunk_store_encryption_key,omitempty"`
	ChunkStoreIv                string    `protobuf:"bytes,48,opt,name=chunk_store_iv,json=chunkStoreIv,proto3" json:"chunk_store_iv,omitempty"`
	EncryptConfig               string    `protobuf:"bytes,49,opt,name=encrypt_config,json=encryptConfig,proto3" json:"encrypt_config,omitempty"`
	AwsEnabled                  bool      `protobuf:"varint,50,opt,name=aws_enabled,json=awsEnabled,proto3" json:"aws_enabled,omitempty"`
	MinioEnabled                bool      `protobuf:"varint,51,opt,name=minio_enabled,json=minioEnabled,proto3" json:"minio_enabled,omitempty"`
	BackblazeEnabled            bool      `protobuf:"varint,52,opt,name=backblaze_enabled,json=backblazeEnabled,proto3" json:"backblaze_enabled,omitempty"`
	CloudSecretKey              string    `protobuf:"bytes,53,opt,name=cloud_secret_key,json=cloudSecretKey,proto3" json:"cloud_secret_key,omitempty"`
	CloudAccessKey              string    `protobuf:"bytes,54,opt,name=cloud_access_key,json=cloudAccessKey,proto3" json:"cloud_access_key,omitempty"`
	ChunkStoreIoThreads         int32     `protobuf:"varint,55,opt,name=chunk_store_io_threads,json=chunkStoreIoThreads,proto3" json:"chunk_store_io_threads,omitempty"`
	SdfscliSalt                 string    `protobuf:"bytes,56,opt,name=sdfscli_salt,json=sdfscliSalt,proto3" json:"sdfscli_salt,omitempty"`
	CloudBucketName             string    `protobuf:"bytes,57,opt,name=cloud_bucket_name,json=cloudBucketName,proto3" json:"cloud_bucket_name,omitempty"`
	UserAgentPrefix             string    `protobuf:"bytes,58,opt,name=user_agent_prefix,json=userAgentPrefix,proto3" json:"user_agent_prefix,omitempty"`
	ChunkStoreCompress          bool      `protobuf:"varint,59,opt,name=chunk_store_compress,json=chunkStoreCompress,proto3" json:"chunk_store_compress,omitempty"`
	GoogleEnabled               bool      `protobuf:"varint,60,opt,name=google_enabled,json=googleEnabled,proto3" json:"google_enabled,omitempty"`
	GcsCredsFile                string    `protobuf:"bytes,61,opt,name=gcs_creds_file,json=gcsCredsFile,proto3" json:"gcs_creds_file,omitempty"`
	BackupVolume                bool      `protobuf:"varint,62,opt,name=backup_volume,json=backupVolume,proto3" json:"backup_volume,omitempty"`
	AzureEnabled                bool      `protobuf:"varint,63,opt,name=azure_enabled,json=azureEnabled,proto3" json:"azure_enabled,omitempty"`
	AzureStorageTier            string    `protobuf:"bytes,64,opt,name=azure_storage_tier,json=azureStorageTier,proto3" json:"azure_storage_tier,omitempty"`
	GlacierRestoreClass         string    `protobuf:"bytes,65,opt,name=glacier_restore_class,json=glacierRestoreClass,proto3" json:"glacier_restore_class,omitempty"`
	AwsAim                      bool      `protobuf:"varint,66,opt,name=aws_aim,json=awsAim,proto3" json:"aws_aim,omitempty"`
	SimpleS3                    bool      `protobuf:"varint,67,opt,name=simple_s3,json=simpleS3,proto3" json:"simple_s3,omitempty"`
	ReportDseSize               bool      `protobuf:"varint,68,opt,name=report_dse_size,json=reportDseSize,proto3" json:"report_dse_size,omitempty"`
	ReportDseCapacity           bool      `protobuf:"varint,69,opt,name=report_dse_capacity,json=reportDseCapacity,proto3" json:"report_dse_capacity,omitempty"`
	UsePerfMon                  bool      `protobuf:"varint,70,opt,name=use_perf_mon,json=usePerfMon,proto3" json:"use_perf_mon,omitempty"`
	MaxChunkAge                 int32     `protobuf:"varint,71,opt,name=max_chunk_age,json=maxChunkAge,proto3" json:"max_chunk_age,omitempty"`
	CloudBacklogSize            string    `protobuf:"bytes,72,opt,name=cloud_backlog_size,json=cloudBacklogSize,proto3" json:"cloud_backlog_size,omitempty"`
	EnableBatchGc               bool      `protobuf:"varint,73,opt,name=enable_batch_gc,json=enableBatchGc,proto3" json:"enable_batch_gc,omitempty"`
	EnableGlobalSyncronization  bool      `protobuf:"varint,74,opt,name=enable_global_syncronization,json=enableGlobalSyncronization,proto3" json:"enable_global_syncronization,omitempty"`
	PubsubTopic                 string    `protobuf:"bytes,75,opt,name=pubsub_topic,json=pubsubTopic,proto3" json:"pubsub_topic,omitempty"`
	PubsubAuthfile              string    `protobuf:"bytes,76,opt,name=pubsub_authfile,json=pubsubAuthfile,proto3" json:"pubsub_authfile,omitempty"`
	PubsubProject               string    `protobuf:"bytes,77,opt,name=pubsub_project,json=pubsubProject,proto3" json:"pubsub_project,omitempty"`
	PubsubSubscription          string    `protobuf:"bytes,78,opt,name=pubsub_subscription,json=pubsubSubscription,proto3" json:"pubsub_subscription,omitempty"`
}

func (x *VolumeCreateRequest) Reset() {
	*x = VolumeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Sdfsvolume_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCreateRequest) ProtoMessage() {}

func (x *VolumeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Sdfsvolume_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCreateRequest.ProtoReflect.Descriptor instead.
func (*VolumeCreateRequest) Descriptor() ([]byte, []int) {
	return file_Sdfsvolume_proto_rawDescGZIP(), []int{0}
}

func (x *VolumeCreateRequest) GetSdfscliPassword() string {
	if x != nil {
		return x.SdfscliPassword
	}
	return ""
}

func (x *VolumeCreateRequest) GetAwsBucketLocation() string {
	if x != nil {
		return x.AwsBucketLocation
	}
	return ""
}

func (x *VolumeCreateRequest) GetSdfscliRequireAuth() string {
	if x != nil {
		return x.SdfscliRequireAuth
	}
	return ""
}

func (x *VolumeCreateRequest) GetSdfscliRequireMutualTls() string {
	if x != nil {
		return x.SdfscliRequireMutualTls
	}
	return ""
}

func (x *VolumeCreateRequest) GetSdfscliDisableSsl() string {
	if x != nil {
		return x.SdfscliDisableSsl
	}
	return ""
}

func (x *VolumeCreateRequest) GetSdfscliListenPort() string {
	if x != nil {
		return x.SdfscliListenPort
	}
	return ""
}

func (x *VolumeCreateRequest) GetGlacierInDays() int32 {
	if x != nil {
		return x.GlacierInDays
	}
	return 0
}

func (x *VolumeCreateRequest) GetAzurearchiveInDays() int32 {
	if x != nil {
		return x.AzurearchiveInDays
	}
	return 0
}

func (x *VolumeCreateRequest) GetRefreshBlobs() bool {
	if x != nil {
		return x.RefreshBlobs
	}
	return false
}

func (x *VolumeCreateRequest) GetSdfscliListenAddr() int32 {
	if x != nil {
		return x.SdfscliListenAddr
	}
	return 0
}

func (x *VolumeCreateRequest) GetHashtableRmThreshold() int64 {
	if x != nil {
		return x.HashtableRmThreshold
	}
	return 0
}

func (x *VolumeCreateRequest) GetSdfsBasePath() string {
	if x != nil {
		return x.SdfsBasePath
	}
	return ""
}

func (x *VolumeCreateRequest) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

func (x *VolumeCreateRequest) GetCloudUrl() string {
	if x != nil {
		return x.CloudUrl
	}
	return ""
}

func (x *VolumeCreateRequest) GetAwsBasicSigner() bool {
	if x != nil {
		return x.AwsBasicSigner
	}
	return false
}

func (x *VolumeCreateRequest) GetAwsDisableDnsBucket() bool {
	if x != nil {
		return x.AwsDisableDnsBucket
	}
	return false
}

func (x *VolumeCreateRequest) GetCompressMetadata() bool {
	if x != nil {
		return x.CompressMetadata
	}
	return false
}

func (x *VolumeCreateRequest) GetNoSimpleMetadata() bool {
	if x != nil {
		return x.NoSimpleMetadata
	}
	return false
}

func (x *VolumeCreateRequest) GetDedupDbStore() string {
	if x != nil {
		return x.DedupDbStore
	}
	return ""
}

func (x *VolumeCreateRequest) GetDedupDbtrashStore() string {
	if x != nil {
		return x.DedupDbtrashStore
	}
	return ""
}

func (x *VolumeCreateRequest) GetIoLog() string {
	if x != nil {
		return x.IoLog
	}
	return ""
}

func (x *VolumeCreateRequest) GetCloudDisableTest() string {
	if x != nil {
		return x.CloudDisableTest
	}
	return ""
}

func (x *VolumeCreateRequest) GetIoSafeClose() bool {
	if x != nil {
		return x.IoSafeClose
	}
	return false
}

func (x *VolumeCreateRequest) GetIoSafeSync() bool {
	if x != nil {
		return x.IoSafeSync
	}
	return false
}

func (x *VolumeCreateRequest) GetIoWriteThreads() int32 {
	if x != nil {
		return x.IoWriteThreads
	}
	return 0
}

func (x *VolumeCreateRequest) GetIoChunkSize() int32 {
	if x != nil {
		return x.IoChunkSize
	}
	return 0
}

func (x *VolumeCreateRequest) GetIoMaxFileWriteBuffers() int32 {
	if x != nil {
		return x.IoMaxFileWriteBuffers
	}
	return 0
}

func (x *VolumeCreateRequest) GetIoMaxOpenFiles() int32 {
	if x != nil {
		return x.IoMaxOpenFiles
	}
	return 0
}

func (x *VolumeCreateRequest) GetLocalCacheSize() string {
	if x != nil {
		return x.LocalCacheSize
	}
	return ""
}

func (x *VolumeCreateRequest) GetIoMetaFileCache() int32 {
	if x != nil {
		return x.IoMetaFileCache
	}
	return 0
}

func (x *VolumeCreateRequest) GetIoClaimChunksSchedule() string {
	if x != nil {
		return x.IoClaimChunksSchedule
	}
	return ""
}

func (x *VolumeCreateRequest) GetPermissionsFile() string {
	if x != nil {
		return x.PermissionsFile
	}
	return ""
}

func (x *VolumeCreateRequest) GetPermissionsFolder() string {
	if x != nil {
		return x.PermissionsFolder
	}
	return ""
}

func (x *VolumeCreateRequest) GetPermissionsOwner() string {
	if x != nil {
		return x.PermissionsOwner
	}
	return ""
}

func (x *VolumeCreateRequest) GetPermissionsGroup() string {
	if x != nil {
		return x.PermissionsGroup
	}
	return ""
}

func (x *VolumeCreateRequest) GetVolumeCapacity() string {
	if x != nil {
		return x.VolumeCapacity
	}
	return ""
}

func (x *VolumeCreateRequest) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *VolumeCreateRequest) GetVolumeMaximumFullPercentage() int32 {
	if x != nil {
		return x.VolumeMaximumFullPercentage
	}
	return 0
}

func (x *VolumeCreateRequest) GetChunkStoreDataLocation() string {
	if x != nil {
		return x.ChunkStoreDataLocation
	}
	return ""
}

func (x *VolumeCreateRequest) GetChunkStoreHashdbLocation() string {
	if x != nil {
		return x.ChunkStoreHashdbLocation
	}
	return ""
}

func (x *VolumeCreateRequest) GetChunkstoreClass() string {
	if x != nil {
		return x.ChunkstoreClass
	}
	return ""
}

func (x *VolumeCreateRequest) GetChunkStoreGcSchedule() string {
	if x != nil {
		return x.ChunkStoreGcSchedule
	}
	return ""
}

func (x *VolumeCreateRequest) GetChunkStoreHashdbClass() string {
	if x != nil {
		return x.ChunkStoreHashdbClass
	}
	return ""
}

func (x *VolumeCreateRequest) GetChunkStoreSize() string {
	if x != nil {
		return x.ChunkStoreSize
	}
	return ""
}

func (x *VolumeCreateRequest) GetHashType() HashTypes {
	if x != nil {
		return x.HashType
	}
	return HashTypes_VARIABLE_SHA256
}

func (x *VolumeCreateRequest) GetChunkStoreEncrypt() bool {
	if x != nil {
		return x.ChunkStoreEncrypt
	}
	return false
}

func (x *VolumeCreateRequest) GetChunkStoreEncryptionKey() string {
	if x != nil {
		return x.ChunkStoreEncryptionKey
	}
	return ""
}

func (x *VolumeCreateRequest) GetChunkStoreIv() string {
	if x != nil {
		return x.ChunkStoreIv
	}
	return ""
}

func (x *VolumeCreateRequest) GetEncryptConfig() string {
	if x != nil {
		return x.EncryptConfig
	}
	return ""
}

func (x *VolumeCreateRequest) GetAwsEnabled() bool {
	if x != nil {
		return x.AwsEnabled
	}
	return false
}

func (x *VolumeCreateRequest) GetMinioEnabled() bool {
	if x != nil {
		return x.MinioEnabled
	}
	return false
}

func (x *VolumeCreateRequest) GetBackblazeEnabled() bool {
	if x != nil {
		return x.BackblazeEnabled
	}
	return false
}

func (x *VolumeCreateRequest) GetCloudSecretKey() string {
	if x != nil {
		return x.CloudSecretKey
	}
	return ""
}

func (x *VolumeCreateRequest) GetCloudAccessKey() string {
	if x != nil {
		return x.CloudAccessKey
	}
	return ""
}

func (x *VolumeCreateRequest) GetChunkStoreIoThreads() int32 {
	if x != nil {
		return x.ChunkStoreIoThreads
	}
	return 0
}

func (x *VolumeCreateRequest) GetSdfscliSalt() string {
	if x != nil {
		return x.SdfscliSalt
	}
	return ""
}

func (x *VolumeCreateRequest) GetCloudBucketName() string {
	if x != nil {
		return x.CloudBucketName
	}
	return ""
}

func (x *VolumeCreateRequest) GetUserAgentPrefix() string {
	if x != nil {
		return x.UserAgentPrefix
	}
	return ""
}

func (x *VolumeCreateRequest) GetChunkStoreCompress() bool {
	if x != nil {
		return x.ChunkStoreCompress
	}
	return false
}

func (x *VolumeCreateRequest) GetGoogleEnabled() bool {
	if x != nil {
		return x.GoogleEnabled
	}
	return false
}

func (x *VolumeCreateRequest) GetGcsCredsFile() string {
	if x != nil {
		return x.GcsCredsFile
	}
	return ""
}

func (x *VolumeCreateRequest) GetBackupVolume() bool {
	if x != nil {
		return x.BackupVolume
	}
	return false
}

func (x *VolumeCreateRequest) GetAzureEnabled() bool {
	if x != nil {
		return x.AzureEnabled
	}
	return false
}

func (x *VolumeCreateRequest) GetAzureStorageTier() string {
	if x != nil {
		return x.AzureStorageTier
	}
	return ""
}

func (x *VolumeCreateRequest) GetGlacierRestoreClass() string {
	if x != nil {
		return x.GlacierRestoreClass
	}
	return ""
}

func (x *VolumeCreateRequest) GetAwsAim() bool {
	if x != nil {
		return x.AwsAim
	}
	return false
}

func (x *VolumeCreateRequest) GetSimpleS3() bool {
	if x != nil {
		return x.SimpleS3
	}
	return false
}

func (x *VolumeCreateRequest) GetReportDseSize() bool {
	if x != nil {
		return x.ReportDseSize
	}
	return false
}

func (x *VolumeCreateRequest) GetReportDseCapacity() bool {
	if x != nil {
		return x.ReportDseCapacity
	}
	return false
}

func (x *VolumeCreateRequest) GetUsePerfMon() bool {
	if x != nil {
		return x.UsePerfMon
	}
	return false
}

func (x *VolumeCreateRequest) GetMaxChunkAge() int32 {
	if x != nil {
		return x.MaxChunkAge
	}
	return 0
}

func (x *VolumeCreateRequest) GetCloudBacklogSize() string {
	if x != nil {
		return x.CloudBacklogSize
	}
	return ""
}

func (x *VolumeCreateRequest) GetEnableBatchGc() bool {
	if x != nil {
		return x.EnableBatchGc
	}
	return false
}

func (x *VolumeCreateRequest) GetEnableGlobalSyncronization() bool {
	if x != nil {
		return x.EnableGlobalSyncronization
	}
	return false
}

func (x *VolumeCreateRequest) GetPubsubTopic() string {
	if x != nil {
		return x.PubsubTopic
	}
	return ""
}

func (x *VolumeCreateRequest) GetPubsubAuthfile() string {
	if x != nil {
		return x.PubsubAuthfile
	}
	return ""
}

func (x *VolumeCreateRequest) GetPubsubProject() string {
	if x != nil {
		return x.PubsubProject
	}
	return ""
}

func (x *VolumeCreateRequest) GetPubsubSubscription() string {
	if x != nil {
		return x.PubsubSubscription
	}
	return ""
}

type SDFSVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeType          VolumeTypes                 `protobuf:"varint,1,opt,name=volumeType,proto3,enum=VolumeTypes" json:"volumeType,omitempty"`
	VolumeName          string                      `protobuf:"bytes,2,opt,name=volumeName,proto3" json:"volumeName,omitempty"`
	DefaultMountPoint   string                      `protobuf:"bytes,3,opt,name=defaultMountPoint,proto3" json:"defaultMountPoint,omitempty"`
	ConfigPath          string                      `protobuf:"bytes,4,opt,name=configPath,proto3" json:"configPath,omitempty"`
	StorageHosts        []*sdfs_creator.StorageHost `protobuf:"bytes,5,rep,name=storageHosts,proto3" json:"storageHosts,omitempty"`
	Id                  string                      `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Port                int32                       `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`
	UseSSL              bool                        `protobuf:"varint,8,opt,name=useSSL,proto3" json:"useSSL,omitempty"`
	MountOnStartup      bool                        `protobuf:"varint,9,opt,name=mountOnStartup,proto3" json:"mountOnStartup,omitempty"`
	AuthEnabled         bool                        `protobuf:"varint,10,opt,name=authEnabled,proto3" json:"authEnabled,omitempty"`
	SdfsPassword        string                      `protobuf:"bytes,11,opt,name=sdfsPassword,proto3" json:"sdfsPassword,omitempty"`
	CurrentMountPoint   string                      `protobuf:"bytes,14,opt,name=currentMountPoint,proto3" json:"currentMountPoint,omitempty"`
	VolSize             int64                       `protobuf:"varint,15,opt,name=volSize,proto3" json:"volSize,omitempty"`
	DseSize             int64                       `protobuf:"varint,16,opt,name=dseSize,proto3" json:"dseSize,omitempty"`
	ChunkLen            int32                       `protobuf:"varint,17,opt,name=chunkLen,proto3" json:"chunkLen,omitempty"`
	AllocationSize      int64                       `protobuf:"varint,18,opt,name=allocationSize,proto3" json:"allocationSize,omitempty"`
	MountStatus         MountStatus                 `protobuf:"varint,19,opt,name=mountStatus,proto3,enum=MountStatus" json:"mountStatus,omitempty"`
	HashType            HashTypes                   `protobuf:"varint,20,opt,name=hashType,proto3,enum=HashTypes" json:"hashType,omitempty"`
	BucketName          string                      `protobuf:"bytes,22,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	CacheSize           int64                       `protobuf:"varint,23,opt,name=cacheSize,proto3" json:"cacheSize,omitempty"`
	EncryptData         bool                        `protobuf:"varint,24,opt,name=encryptData,proto3" json:"encryptData,omitempty"`
	EncryptionKey       string                      `protobuf:"bytes,25,opt,name=encryptionKey,proto3" json:"encryptionKey,omitempty"`
	EncryptionIV        string                      `protobuf:"bytes,26,opt,name=encryptionIV,proto3" json:"encryptionIV,omitempty"`
	BucketLocation      string                      `protobuf:"bytes,27,opt,name=bucketLocation,proto3" json:"bucketLocation,omitempty"`
	HostName            string                      `protobuf:"bytes,28,opt,name=hostName,proto3" json:"hostName,omitempty"`
	DisableDNSBucket    bool                        `protobuf:"varint,29,opt,name=disableDNSBucket,proto3" json:"disableDNSBucket,omitempty"`
	AccessKey           string                      `protobuf:"bytes,30,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	SecretKey           string                      `protobuf:"bytes,31,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	MaxThreads          int32                       `protobuf:"varint,32,opt,name=maxThreads,proto3" json:"maxThreads,omitempty"`
	ConnectionTimeoutMS int32                       `protobuf:"varint,33,opt,name=connectionTimeoutMS,proto3" json:"connectionTimeoutMS,omitempty"`
	BlockSizeMB         int32                       `protobuf:"varint,34,opt,name=blockSizeMB,proto3" json:"blockSizeMB,omitempty"`
	ProxyHost           string                      `protobuf:"bytes,35,opt,name=proxyHost,proto3" json:"proxyHost,omitempty"`
	ProxyPort           int32                       `protobuf:"varint,36,opt,name=proxyPort,proto3" json:"proxyPort,omitempty"`
	ProxyUser           string                      `protobuf:"bytes,37,opt,name=proxyUser,proto3" json:"proxyUser,omitempty"`
	ProxyPassword       string                      `protobuf:"bytes,38,opt,name=proxyPassword,proto3" json:"proxyPassword,omitempty"`
	ProxyDomain         string                      `protobuf:"bytes,39,opt,name=proxyDomain,proto3" json:"proxyDomain,omitempty"`
	ReadSpeed           int32                       `protobuf:"varint,40,opt,name=readSpeed,proto3" json:"readSpeed,omitempty"`
	WriteSpeed          int32                       `protobuf:"varint,41,opt,name=writeSpeed,proto3" json:"writeSpeed,omitempty"`
	ArchiveInDays       int32                       `protobuf:"varint,42,opt,name=archiveInDays,proto3" json:"archiveInDays,omitempty"`
	UseAim              bool                        `protobuf:"varint,43,opt,name=useAim,proto3" json:"useAim,omitempty"`
	DisableCheckAuth    bool                        `protobuf:"varint,44,opt,name=disableCheckAuth,proto3" json:"disableCheckAuth,omitempty"`
	SimpleS3            bool                        `protobuf:"varint,45,opt,name=simpleS3,proto3" json:"simpleS3,omitempty"`
	Usebasicsigner      bool                        `protobuf:"varint,46,opt,name=usebasicsigner,proto3" json:"usebasicsigner,omitempty"`
	Usev4Signer         bool                        `protobuf:"varint,47,opt,name=usev4signer,proto3" json:"usev4signer,omitempty"`
	SimpleMD            bool                        `protobuf:"varint,48,opt,name=simpleMD,proto3" json:"simpleMD,omitempty"`
	CompressMD          bool                        `protobuf:"varint,49,opt,name=compressMD,proto3" json:"compressMD,omitempty"`
	AcceleratedAWS      bool                        `protobuf:"varint,50,opt,name=acceleratedAWS,proto3" json:"acceleratedAWS,omitempty"`
	ForBackup           bool                        `protobuf:"varint,51,opt,name=forBackup,proto3" json:"forBackup,omitempty"`
	AiInDays            int32                       `protobuf:"varint,52,opt,name=aiInDays,proto3" json:"aiInDays,omitempty"`
	BacklogSize         string                      `protobuf:"bytes,53,opt,name=backlogSize,proto3" json:"backlogSize,omitempty"`
}

func (x *SDFSVolume) Reset() {
	*x = SDFSVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Sdfsvolume_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDFSVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDFSVolume) ProtoMessage() {}

func (x *SDFSVolume) ProtoReflect() protoreflect.Message {
	mi := &file_Sdfsvolume_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDFSVolume.ProtoReflect.Descriptor instead.
func (*SDFSVolume) Descriptor() ([]byte, []int) {
	return file_Sdfsvolume_proto_rawDescGZIP(), []int{1}
}

func (x *SDFSVolume) GetVolumeType() VolumeTypes {
	if x != nil {
		return x.VolumeType
	}
	return VolumeTypes_VOL_TYPE_AWS
}

func (x *SDFSVolume) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *SDFSVolume) GetDefaultMountPoint() string {
	if x != nil {
		return x.DefaultMountPoint
	}
	return ""
}

func (x *SDFSVolume) GetConfigPath() string {
	if x != nil {
		return x.ConfigPath
	}
	return ""
}

func (x *SDFSVolume) GetStorageHosts() []*sdfs_creator.StorageHost {
	if x != nil {
		return x.StorageHosts
	}
	return nil
}

func (x *SDFSVolume) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SDFSVolume) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SDFSVolume) GetUseSSL() bool {
	if x != nil {
		return x.UseSSL
	}
	return false
}

func (x *SDFSVolume) GetMountOnStartup() bool {
	if x != nil {
		return x.MountOnStartup
	}
	return false
}

func (x *SDFSVolume) GetAuthEnabled() bool {
	if x != nil {
		return x.AuthEnabled
	}
	return false
}

func (x *SDFSVolume) GetSdfsPassword() string {
	if x != nil {
		return x.SdfsPassword
	}
	return ""
}

func (x *SDFSVolume) GetCurrentMountPoint() string {
	if x != nil {
		return x.CurrentMountPoint
	}
	return ""
}

func (x *SDFSVolume) GetVolSize() int64 {
	if x != nil {
		return x.VolSize
	}
	return 0
}

func (x *SDFSVolume) GetDseSize() int64 {
	if x != nil {
		return x.DseSize
	}
	return 0
}

func (x *SDFSVolume) GetChunkLen() int32 {
	if x != nil {
		return x.ChunkLen
	}
	return 0
}

func (x *SDFSVolume) GetAllocationSize() int64 {
	if x != nil {
		return x.AllocationSize
	}
	return 0
}

func (x *SDFSVolume) GetMountStatus() MountStatus {
	if x != nil {
		return x.MountStatus
	}
	return MountStatus_mounted
}

func (x *SDFSVolume) GetHashType() HashTypes {
	if x != nil {
		return x.HashType
	}
	return HashTypes_VARIABLE_SHA256
}

func (x *SDFSVolume) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *SDFSVolume) GetCacheSize() int64 {
	if x != nil {
		return x.CacheSize
	}
	return 0
}

func (x *SDFSVolume) GetEncryptData() bool {
	if x != nil {
		return x.EncryptData
	}
	return false
}

func (x *SDFSVolume) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

func (x *SDFSVolume) GetEncryptionIV() string {
	if x != nil {
		return x.EncryptionIV
	}
	return ""
}

func (x *SDFSVolume) GetBucketLocation() string {
	if x != nil {
		return x.BucketLocation
	}
	return ""
}

func (x *SDFSVolume) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *SDFSVolume) GetDisableDNSBucket() bool {
	if x != nil {
		return x.DisableDNSBucket
	}
	return false
}

func (x *SDFSVolume) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *SDFSVolume) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *SDFSVolume) GetMaxThreads() int32 {
	if x != nil {
		return x.MaxThreads
	}
	return 0
}

func (x *SDFSVolume) GetConnectionTimeoutMS() int32 {
	if x != nil {
		return x.ConnectionTimeoutMS
	}
	return 0
}

func (x *SDFSVolume) GetBlockSizeMB() int32 {
	if x != nil {
		return x.BlockSizeMB
	}
	return 0
}

func (x *SDFSVolume) GetProxyHost() string {
	if x != nil {
		return x.ProxyHost
	}
	return ""
}

func (x *SDFSVolume) GetProxyPort() int32 {
	if x != nil {
		return x.ProxyPort
	}
	return 0
}

func (x *SDFSVolume) GetProxyUser() string {
	if x != nil {
		return x.ProxyUser
	}
	return ""
}

func (x *SDFSVolume) GetProxyPassword() string {
	if x != nil {
		return x.ProxyPassword
	}
	return ""
}

func (x *SDFSVolume) GetProxyDomain() string {
	if x != nil {
		return x.ProxyDomain
	}
	return ""
}

func (x *SDFSVolume) GetReadSpeed() int32 {
	if x != nil {
		return x.ReadSpeed
	}
	return 0
}

func (x *SDFSVolume) GetWriteSpeed() int32 {
	if x != nil {
		return x.WriteSpeed
	}
	return 0
}

func (x *SDFSVolume) GetArchiveInDays() int32 {
	if x != nil {
		return x.ArchiveInDays
	}
	return 0
}

func (x *SDFSVolume) GetUseAim() bool {
	if x != nil {
		return x.UseAim
	}
	return false
}

func (x *SDFSVolume) GetDisableCheckAuth() bool {
	if x != nil {
		return x.DisableCheckAuth
	}
	return false
}

func (x *SDFSVolume) GetSimpleS3() bool {
	if x != nil {
		return x.SimpleS3
	}
	return false
}

func (x *SDFSVolume) GetUsebasicsigner() bool {
	if x != nil {
		return x.Usebasicsigner
	}
	return false
}

func (x *SDFSVolume) GetUsev4Signer() bool {
	if x != nil {
		return x.Usev4Signer
	}
	return false
}

func (x *SDFSVolume) GetSimpleMD() bool {
	if x != nil {
		return x.SimpleMD
	}
	return false
}

func (x *SDFSVolume) GetCompressMD() bool {
	if x != nil {
		return x.CompressMD
	}
	return false
}

func (x *SDFSVolume) GetAcceleratedAWS() bool {
	if x != nil {
		return x.AcceleratedAWS
	}
	return false
}

func (x *SDFSVolume) GetForBackup() bool {
	if x != nil {
		return x.ForBackup
	}
	return false
}

func (x *SDFSVolume) GetAiInDays() int32 {
	if x != nil {
		return x.AiInDays
	}
	return 0
}

func (x *SDFSVolume) GetBacklogSize() string {
	if x != nil {
		return x.BacklogSize
	}
	return ""
}

type NFSExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientNetwork string `protobuf:"bytes,1,opt,name=clientNetwork,proto3" json:"clientNetwork,omitempty"`
	MountOptions  string `protobuf:"bytes,2,opt,name=mountOptions,proto3" json:"mountOptions,omitempty"`
	RelativePath  string `protobuf:"bytes,3,opt,name=relativePath,proto3" json:"relativePath,omitempty"`
	VolumeId      string `protobuf:"bytes,4,opt,name=volumeId,proto3" json:"volumeId,omitempty"`
	MountOnStart  bool   `protobuf:"varint,5,opt,name=mountOnStart,proto3" json:"mountOnStart,omitempty"`
	Mounted       bool   `protobuf:"varint,6,opt,name=mounted,proto3" json:"mounted,omitempty"`
	MountedPath   string `protobuf:"bytes,7,opt,name=mountedPath,proto3" json:"mountedPath,omitempty"`
	Id            string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NFSExport) Reset() {
	*x = NFSExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Sdfsvolume_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFSExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFSExport) ProtoMessage() {}

func (x *NFSExport) ProtoReflect() protoreflect.Message {
	mi := &file_Sdfsvolume_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFSExport.ProtoReflect.Descriptor instead.
func (*NFSExport) Descriptor() ([]byte, []int) {
	return file_Sdfsvolume_proto_rawDescGZIP(), []int{2}
}

func (x *NFSExport) GetClientNetwork() string {
	if x != nil {
		return x.ClientNetwork
	}
	return ""
}

func (x *NFSExport) GetMountOptions() string {
	if x != nil {
		return x.MountOptions
	}
	return ""
}

func (x *NFSExport) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *NFSExport) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *NFSExport) GetMountOnStart() bool {
	if x != nil {
		return x.MountOnStart
	}
	return false
}

func (x *NFSExport) GetMounted() bool {
	if x != nil {
		return x.Mounted
	}
	return false
}

func (x *NFSExport) GetMountedPath() string {
	if x != nil {
		return x.MountedPath
	}
	return ""
}

func (x *NFSExport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ISCSITarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid          string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Guid         string `protobuf:"bytes,2,opt,name=guid,proto3" json:"guid,omitempty"`
	BackingFile  string `protobuf:"bytes,3,opt,name=backingFile,proto3" json:"backingFile,omitempty"`
	ListenIP     string `protobuf:"bytes,4,opt,name=listenIP,proto3" json:"listenIP,omitempty"`
	MountOnStart bool   `protobuf:"varint,5,opt,name=mountOnStart,proto3" json:"mountOnStart,omitempty"`
	Id           string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Mounted      bool   `protobuf:"varint,7,opt,name=mounted,proto3" json:"mounted,omitempty"`
	Size         int64  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ISCSITarget) Reset() {
	*x = ISCSITarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Sdfsvolume_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISCSITarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISCSITarget) ProtoMessage() {}

func (x *ISCSITarget) ProtoReflect() protoreflect.Message {
	mi := &file_Sdfsvolume_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISCSITarget.ProtoReflect.Descriptor instead.
func (*ISCSITarget) Descriptor() ([]byte, []int) {
	return file_Sdfsvolume_proto_rawDescGZIP(), []int{3}
}

func (x *ISCSITarget) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *ISCSITarget) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *ISCSITarget) GetBackingFile() string {
	if x != nil {
		return x.BackingFile
	}
	return ""
}

func (x *ISCSITarget) GetListenIP() string {
	if x != nil {
		return x.ListenIP
	}
	return ""
}

func (x *ISCSITarget) GetMountOnStart() bool {
	if x != nil {
		return x.MountOnStart
	}
	return false
}

func (x *ISCSITarget) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ISCSITarget) GetMounted() bool {
	if x != nil {
		return x.Mounted
	}
	return false
}

func (x *ISCSITarget) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type VolumeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config   *VolumeCreateRequest `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	VolumeId string               `protobuf:"bytes,2,opt,name=volumeId,proto3" json:"volumeId,omitempty"`
}

func (x *VolumeConfig) Reset() {
	*x = VolumeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Sdfsvolume_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeConfig) ProtoMessage() {}

func (x *VolumeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Sdfsvolume_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeConfig.ProtoReflect.Descriptor instead.
func (*VolumeConfig) Descriptor() ([]byte, []int) {
	return file_Sdfsvolume_proto_rawDescGZIP(), []int{4}
}

func (x *VolumeConfig) GetConfig() *VolumeCreateRequest {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *VolumeConfig) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

type VolumeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Partent      string   `protobuf:"bytes,2,opt,name=partent,proto3" json:"partent,omitempty"`
	Type         string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Level        Levels   `protobuf:"varint,4,opt,name=level,proto3,enum=Levels" json:"level,omitempty"`
	ShortMsg     string   `protobuf:"bytes,5,opt,name=shortMsg,proto3" json:"shortMsg,omitempty"`
	LongMsg      string   `protobuf:"bytes,6,opt,name=longMsg,proto3" json:"longMsg,omitempty"`
	Target       string   `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`
	MaxCt        int64    `protobuf:"varint,8,opt,name=maxCt,proto3" json:"maxCt,omitempty"`
	CurCt        int64    `protobuf:"varint,9,opt,name=curCt,proto3" json:"curCt,omitempty"`
	StartTime    int64    `protobuf:"varint,10,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      int64    `protobuf:"varint,11,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Host         string   `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"`
	ExtendedInfo string   `protobuf:"bytes,13,opt,name=extendedInfo,proto3" json:"extendedInfo,omitempty"`
	Children     []string `protobuf:"bytes,14,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *VolumeEvent) Reset() {
	*x = VolumeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Sdfsvolume_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeEvent) ProtoMessage() {}

func (x *VolumeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_Sdfsvolume_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeEvent.ProtoReflect.Descriptor instead.
func (*VolumeEvent) Descriptor() ([]byte, []int) {
	return file_Sdfsvolume_proto_rawDescGZIP(), []int{5}
}

func (x *VolumeEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VolumeEvent) GetPartent() string {
	if x != nil {
		return x.Partent
	}
	return ""
}

func (x *VolumeEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VolumeEvent) GetLevel() Levels {
	if x != nil {
		return x.Level
	}
	return Levels_INFO
}

func (x *VolumeEvent) GetShortMsg() string {
	if x != nil {
		return x.ShortMsg
	}
	return ""
}

func (x *VolumeEvent) GetLongMsg() string {
	if x != nil {
		return x.LongMsg
	}
	return ""
}

func (x *VolumeEvent) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *VolumeEvent) GetMaxCt() int64 {
	if x != nil {
		return x.MaxCt
	}
	return 0
}

func (x *VolumeEvent) GetCurCt() int64 {
	if x != nil {
		return x.CurCt
	}
	return 0
}

func (x *VolumeEvent) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *VolumeEvent) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *VolumeEvent) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *VolumeEvent) GetExtendedInfo() string {
	if x != nil {
		return x.ExtendedInfo
	}
	return ""
}

func (x *VolumeEvent) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

var File_Sdfsvolume_proto protoreflect.FileDescriptor

var file_Sdfsvolume_proto_rawDesc = []byte{
	0x0a, 0x10, 0x53, 0x64, 0x66, 0x73, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x53, 0x64, 0x66, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf9, 0x1a, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x64,
	0x66, 0x73, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x64, 0x66, 0x73, 0x63, 0x6c, 0x69, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x77, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x64, 0x66, 0x73, 0x63, 0x6c, 0x69,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x64, 0x66, 0x73, 0x63, 0x6c, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x64, 0x66, 0x73, 0x63,
	0x6c, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x64, 0x66,
	0x73, 0x63, 0x6c, 0x69, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x54, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x64, 0x66, 0x73, 0x63, 0x6c, 0x69, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x64, 0x66, 0x73, 0x63, 0x6c, 0x69, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x73, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x64, 0x66, 0x73, 0x63, 0x6c, 0x69, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x64, 0x66, 0x73, 0x63, 0x6c, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67,
	0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c,
	0x6f, 0x62, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x64, 0x66, 0x73, 0x63, 0x6c, 0x69, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x73, 0x64, 0x66, 0x73, 0x63, 0x6c, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6d,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x64, 0x66,
	0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x64, 0x66, 0x73, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x77, 0x73,
	0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x77, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x77, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x6e, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x5f, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x6e, 0x6f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x64, 0x62, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x5f, 0x64, 0x62, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x64, 0x75, 0x70, 0x44, 0x62, 0x74,
	0x72, 0x61, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6f, 0x5f,
	0x6c, 0x6f, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6f, 0x4c, 0x6f, 0x67,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x6f, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6f, 0x53, 0x61, 0x66, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6f, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6f, 0x53, 0x61, 0x66, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x11,
	0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x4f, 0x70,
	0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69,
	0x6f, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x37,
	0x0a, 0x18, 0x69, 0x6f, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x69, 0x6f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x75, 0x6c, 0x6c,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x64, 0x62, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x67,
	0x63, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x63, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x64, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x76, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x76, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x62, 0x6c, 0x61, 0x7a, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62,
	0x61, 0x63, 0x6b, 0x62, 0x6c, 0x61, 0x7a, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x64, 0x66, 0x73,
	0x63, 0x6c, 0x69, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x64, 0x66, 0x73, 0x63, 0x6c, 0x69, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x67, 0x63, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x63, 0x73, 0x43, 0x72, 0x65, 0x64, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x6c,
	0x61, 0x63, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6c, 0x61, 0x63, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x69, 0x6d, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x77, 0x73, 0x41, 0x69, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x73, 0x33, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x53, 0x33, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x73, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x65, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41,
	0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x67, 0x63, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x63, 0x12, 0x40, 0x0a, 0x1c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x72, 0x6f,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x41, 0x75,
	0x74, 0x68, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a,
	0x13, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc,
	0x0d, 0x0a, 0x0a, 0x53, 0x44, 0x46, 0x53, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x53, 0x53, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x53, 0x53, 0x4c, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x64, 0x66, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x64, 0x66, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x64, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x4c, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x4c, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x56, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x56, 0x12, 0x26, 0x0a,
	0x0e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x4e, 0x53, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x53,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x41, 0x69, 0x6d, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x41, 0x69, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x33, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x33, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x62, 0x61, 0x73, 0x69, 0x63, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x76, 0x34, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x76, 0x34, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x44, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x44, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x57, 0x53, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x57,
	0x53, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x69, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x69, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x85, 0x02,
	0x0a, 0x09, 0x4e, 0x46, 0x53, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x0b, 0x49, 0x53, 0x43, 0x53, 0x49, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x58, 0x0a, 0x0c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xf0, 0x02, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x43, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x61, 0x78, 0x43, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x43, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x75, 0x72, 0x43, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x2a, 0x4b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x41,
	0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f, 0x31, 0x36,
	0x30, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x4d, 0x44, 0x35, 0x10, 0x02, 0x2a, 0x8f, 0x01, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4f, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x56,
	0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x53, 0x33, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x56, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x53,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x32, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x54, 0x5f,
	0x4d, 0x49, 0x4e, 0x49, 0x4f, 0x10, 0x06, 0x2a, 0x37, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x02,
	0x2a, 0x34, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2f, 0x73,
	0x64, 0x66, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Sdfsvolume_proto_rawDescOnce sync.Once
	file_Sdfsvolume_proto_rawDescData = file_Sdfsvolume_proto_rawDesc
)

func file_Sdfsvolume_proto_rawDescGZIP() []byte {
	file_Sdfsvolume_proto_rawDescOnce.Do(func() {
		file_Sdfsvolume_proto_rawDescData = protoimpl.X.CompressGZIP(file_Sdfsvolume_proto_rawDescData)
	})
	return file_Sdfsvolume_proto_rawDescData
}

var file_Sdfsvolume_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_Sdfsvolume_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_Sdfsvolume_proto_goTypes = []interface{}{
	(HashTypes)(0),                   // 0: hashTypes
	(VolumeTypes)(0),                 // 1: volumeTypes
	(MountStatus)(0),                 // 2: mountStatus
	(Levels)(0),                      // 3: Levels
	(*VolumeCreateRequest)(nil),      // 4: VolumeCreateRequest
	(*SDFSVolume)(nil),               // 5: SDFSVolume
	(*NFSExport)(nil),                // 6: NFSExport
	(*ISCSITarget)(nil),              // 7: ISCSITarget
	(*VolumeConfig)(nil),             // 8: VolumeConfig
	(*VolumeEvent)(nil),              // 9: VolumeEvent
	(*sdfs_creator.StorageHost)(nil), // 10: StorageHost
}
var file_Sdfsvolume_proto_depIdxs = []int32{
	0,  // 0: VolumeCreateRequest.hash_type:type_name -> hashTypes
	1,  // 1: SDFSVolume.volumeType:type_name -> volumeTypes
	10, // 2: SDFSVolume.storageHosts:type_name -> StorageHost
	2,  // 3: SDFSVolume.mountStatus:type_name -> mountStatus
	0,  // 4: SDFSVolume.hashType:type_name -> hashTypes
	4,  // 5: VolumeConfig.config:type_name -> VolumeCreateRequest
	3,  // 6: VolumeEvent.level:type_name -> Levels
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_Sdfsvolume_proto_init() }
func file_Sdfsvolume_proto_init() {
	if File_Sdfsvolume_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Sdfsvolume_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Sdfsvolume_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDFSVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Sdfsvolume_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFSExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Sdfsvolume_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISCSITarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Sdfsvolume_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Sdfsvolume_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Sdfsvolume_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Sdfsvolume_proto_goTypes,
		DependencyIndexes: file_Sdfsvolume_proto_depIdxs,
		EnumInfos:         file_Sdfsvolume_proto_enumTypes,
		MessageInfos:      file_Sdfsvolume_proto_msgTypes,
	}.Build()
	File_Sdfsvolume_proto = out.File
	file_Sdfsvolume_proto_rawDesc = nil
	file_Sdfsvolume_proto_goTypes = nil
	file_Sdfsvolume_proto_depIdxs = nil
}
